// Load FSLR Manual Synthesis Pipeline via CSV Upload -- Teresa Le
// Should probably separate the code into several files and call from within the code (if that's possible)
// Meant to be run as an explicit transaction (until I can figure out how to run an implicit one)
// Partially generate by Neo4j Workshop.  Adapted to run in Neo4j Browser.  Tested on a localhost server.  Not yet tested with AuraDB.
// Version 1.2 has changed (OTC Ingredients/Precursors) -[INGREDIENTS_OF]-> (Operation:Mix) to (OTC Ingredients/Precursors) -[WENT_TO]-> (Operation:Mix))


//PARAMETER initialization
//--------------------------------------------
// Define the file path root and the individual file names required for loading.
// https://neo4j.com/docs/operations-manual/current/configuration/file-locations/
// Syntax was changed to run in "Neo4j Browser".  Original was generated by "Neo4j Workshop"
// Copy Paste VIEWABLE dropbox link with last character "0" replaced by "1" for file download instead of html
:param groupmembers_link => '';
:param mix_makepre_link => '';
:param heat_link => ''; 
:param rest_link => '';
:param mix_makesamp_link => '';
:param idsToSkip: [];



// CONSTRAINT creation
// -------------------------------------------
//
// Create node uniqueness constraints, ensuring no duplicates for the given node label and ID property exist in the database. This also ensures no duplicates are introduced in future.
//
// NOTE: Generated for 5.19-aura.  Successfully ran on 5.12 Neo4j Browser.
//
// Group Members
CREATE CONSTRAINT `kerberos Group_Member_uniq` IF NOT EXISTS
FOR (n: `Group Member`)
REQUIRE (n.`kerberos`) IS UNIQUE;
// OTC Ingredients
CREATE CONSTRAINT `OTC_ID OTC_Ingredient_uniq` IF NOT EXISTS
FOR (n: `OTC Ingredient`) // is full label for this type of node
REQUIRE (n.`OTC Ingredient ID`) IS UNIQUE;
// Mix Operation
CREATE CONSTRAINT `Mix_Operation_ID Mix_uniq` IF NOT EXISTS
FOR (n: `Mix`) // CREATE CONSTRAINT only applies for one node label at a time.  Choosing Mix because most relevant for this node, but originally meant for Operation:Mix:MakePrecursor.
REQUIRE (n.`Mix Operation ID`) IS UNIQUE;
// Precursor
CREATE CONSTRAINT `Precursor_ID Precursor_uniq` IF NOT EXISTS
FOR (n: `Precursor`)
REQUIRE (n.`Precursor ID`) IS UNIQUE;
// Heat Operation
CREATE CONSTRAINT `Heat_Operation_ID Heat_uniq` IF NOT EXISTS
FOR (n: `Heat`) // Operation:Heat is full label
REQUIRE (n.`Heat Operation ID`) IS UNIQUE;
// Rest Operation
CREATE CONSTRAINT `Rest_Operation_ID Rest_uniq` IF NOT EXISTS
FOR (n: `Rest`) // Operation:Rest is full label
REQUIRE (n.`Rest Operation ID`) IS UNIQUE;
// Samples 
CREATE CONSTRAINT `Sample_ID Sample_uniq` IF NOT EXISTS
FOR (n: `Sample`)
REQUIRE (n.`Sample ID`) IS UNIQUE;

// NODE load
// ----------------------------------------
//
// Load nodes in batches, one node label at a time. Nodes will be created using a MERGE statement to ensure a node with the same label and ID property remains unique. Pre-existing nodes found by a MERGE statement will have their other properties set to the latest values encountered in a load file.
//
// NOTE: Any nodes with IDs in the 'idsToSkip' list parameter will not be loaded.
//
// GROUP MEMBERS
// --------------
// Notes: CALL iterates through each incoming row of the data being read by the line(s) of code before it and executes whatever is in brackets for each row.
// CALL was included in generated code but its usage in LOADCSV is not mentione in documentation.
// It is possible CALL is just useful for implementing more complicated subqueries on each row.
LOAD CSV WITH HEADERS FROM ($groupmembers_link) AS row
WITH row
WHERE NOT row.`kerberos` IN $idsToSkip AND NOT row.`kerberos` IS NULL
CALL {
  WITH row
  MERGE (n: `Group Member` { `kerberos`: row.`kerberos` })
  SET n.`kerberos` = row.`kerberos`
  SET n.`Name` = row.`Name`
  SET n.`MIT ID` = row.`MIT ID`
}; // IN TRANSACTIONS OF 10000 ROWS; // Does not work in external transaction.  Semicolon Required if removing IN TRANSACTIONS.
//
// OTC INGREDIENTS  -- Create node ONLY WHEN Ing Type is listed as "OTC Ingredient" AND Ingredient ID is unique.
// ----------------
LOAD CSV WITH HEADERS FROM ($mix_makepre_link) AS row
WITH row
WHERE row.`Ing 1 Type` = 'OTC Ingredient' AND NOT row.`Ing 1 ID` IN $idsToSkip AND NOT row.`Ing 1 ID` IS NULL
CALL {
  WITH row
  MERGE (n:`OTC Ingredient` { `OTC ID`: row.`Ing 1 ID` })
  SET n.`OTC Ingredient ID` = row.`Ing 1 ID`
  SET n.`Description` = row.`Ing 1 Description`
  SET n.`Formula` = row.`Ing 1 Formula`
  SET n.`State` = row.`Ing 1 State`
  SET n.`Purity` = toFloat(trim(row.`Ing 1 Purity`))
  SET n.`Molar Mass (mg)` = toInteger(trim(row.`Ing 1 Molar Mass (mg)`))
}; // IN TRANSACTIONS OF 10000 ROWS; Does not work in external transaction.  Semicolon Required if removing IN TRANSACTIONS.
//
LOAD CSV WITH HEADERS FROM ($mix_makepre_link) AS row
WITH row
WHERE row.`Ing 2 Type` = 'OTC Ingredient' AND NOT row.`Ing 2 ID` IN $idsToSkip AND NOT row.`Ing 2 ID` IS NULL
CALL {
  WITH row
  MERGE (n: `OTC Ingredient` { `OTC ID`: row.`Ing 2 ID` })
  SET n.`OTC Ingredient ID` = row.`Ing 2 ID`
  SET n.`Description` = row.`Ing 2 Description`
  SET n.`Formula` = row.`Ing 2 Formula`
  SET n.`State` = row.`Ing 2 State`
  SET n.`Purity` = toInteger(trim(row.`Ing 2 Purity`))
  SET n.`Molar Mass (mg)` = toInteger(trim(row.`Ing 2 Molar Mass (mg)`))
}; //IN TRANSACTIONS OF 10000 ROWS;  Does not work in external transaction.  Semicolon Required if removing IN TRANSACTIONS.
//
// OPERATION:MIX:MAKEPRECURSOR OPERATION
// --------------
LOAD CSV WITH HEADERS FROM ($mix_makepre_link) AS row
WITH row
WHERE NOT row.`Mix Operation ID` IN $idsToSkip AND NOT row.`Mix Operation ID` IS NULL
CALL {
  WITH row
  MERGE (n: Operation:Mix:MakePrecursor { `Mix Operation ID`: row.`Mix Operation ID` })
  SET n.`Mix Operation ID` = row.`Mix Operation ID`
  // Your script contains the datetime datatype. Our app attempts to convert dates to ISO 8601 date format before passing them to the Cypher function.
  // This conversion cannot be done in a Cypher script load. Please ensure that your CSV file columns are in ISO 8601 date format to ensure equivalent loads.
  SET n.`Timestamp` = datetime(row.`Mix Timestamp`)
  SET n.`New Precursor ID` = row.`New Object ID`
  SET n.`Dissolved` = row.`Dissolved`
  SET n.`Ing 1 Description` = row.`Ing 1 Description`
  SET n.`Ing 1 ID` = row.`Ing 1 ID`
  SET n.`Ing 1 Target Molarity` = toFloat(trim(row.`Ing 1 Target Molarity`))
  SET n.`Ing 1 Actual Amt` = toFloat(trim(row.`Ing 1 Actual Amt`))
  SET n.`Ing 1 Amt Unit` = row.`Ing 1 Amt Unit`
  SET n.`Ing 2 Description` = row.`Ing 2 Description`
  SET n.`Ing 2 ID` = row.`Ing 2 ID`
  SET n.`Ing 2 Target Molarity` = toFloat(trim(row.`Ing 2 Target Molarity`))
  SET n.`Ing 2 Actual Amt` = toInteger(trim(row.`Ing 2 Actual Amt`))
  SET n.`Ing 2 Amt Unit` = row.`Ing 2 Amt Unit`
  SET n.`Executor` = row.`Executor`
  SET n.`Notes` = row.`Notes`
}; // IN TRANSACTIONS OF 10000 ROWS; Does not work in external transaction.  Semicolon Required if removing IN TRANSACTIONS.
//
// PPRECURSORS
// -------------
LOAD CSV WITH HEADERS FROM ($mix_makepre_link) AS row
WITH row
WHERE row.`New Object Type` = 'Precursor' AND NOT row.`New Object ID` IN $idsToSkip AND NOT row.`New Object ID` IS NULL
CALL {
  WITH row
  MERGE (n: `Precursor` { `Precursor ID`: row.`New Object ID` })
  SET n.`Precursor ID` = row.`New Object ID`
  // Your script contains the datetime datatype. Our app attempts to convert dates to ISO 8601 date format before passing them to the Cypher function.
  // This conversion cannot be done in a Cypher script load. Please ensure that your CSV file columns are in ISO 8601 date format to ensure equivalent loads.
  SET n.`Timestamp` = datetime(row.`Mix Timestamp`)
  SET n.`Description` = row.`New Object Description`
  SET n.`Ing 1 Description` = row.`Ing 1 Description`
  SET n.`Ing 1 ID` = row.`Ing 1 ID`
  SET n.`Ing 2 Description` = row.`Ing 2 Description`
  SET n.`Ing 2 ID` = row.`Ing 2 ID`
}; //IN TRANSACTIONS OF 10000 ROWS;  Does not work in external transaction.  Semicolon Required if removing IN TRANSACTIONS.
//
// HEAT OPERATION
// --------------
LOAD CSV WITH HEADERS FROM ($heat_link) AS row
WITH row
WHERE NOT row.`Heat Operation ID` IN $idsToSkip AND NOT row.`Heat Operation ID` IS NULL
CALL {
  WITH row
  MERGE (n: Operation:Heat { `Heat Operation ID`: row.`Heat Operation ID` })
  SET n.`Heat Operation ID` = row.`Heat Operation ID`
  // Your script contains the datetime datatype. Our app attempts to convert dates to ISO 8601 date format before passing them to the Cypher function.
  // This conversion cannot be done in a Cypher script load. Please ensure that your CSV file columns are in ISO 8601 date format to ensure equivalent loads.
  SET n.`Timestamp` = datetime(row.`Heat Timestamp`)
  SET n.`Heat Object ID` = row.`Heat Object ID`
  SET n.`Dissolve` = row.`Heat Dissolve`
  SET n.`Temp (C)` = row.`Heat Temp (C)`
  SET n.`Time (min)` = row.`Heat Time (min)`
  SET n.`Executor` = row.`Executor`
  SET n.`Notes` = row.`Notes`
}; // IN TRANSACTIONS OF 10000 ROWS; Does not work in external transaction.  Semicolon Required if removing IN TRANSACTIONS.
//
// REST OPERATION
// --------------
LOAD CSV WITH HEADERS FROM ($rest_link) AS row
WITH row
WHERE NOT row.`Rest Operation ID` IN $idsToSkip AND NOT row.`Rest Operation ID` IS NULL
CALL {
  WITH row
  MERGE (n: Operation:Rest { `Rest Operation ID`: row.`Rest Operation ID` })
  SET n.`Rest Operation ID` = row.`Rest Operation ID`
  // Your script contains the datetime datatype. Our app attempts to convert dates to ISO 8601 date format before passing them to the Cypher function.
  // This conversion cannot be done in a Cypher script load. Please ensure that your CSV file columns are in ISO 8601 date format to ensure equivalent loads.
  SET n.`Timestamp` = datetime(row.`Rest Timestamp`)
  SET n.`Rest Object ID` = row.`Rest Object ID`
  SET n.`Dissolved` = row.`Rest Dissolved`
  SET n.`Time (min)` = row.`Rest Time (min)`
  SET n.`Executor` = row.`Executor`
  SET n.`Notes` = row.`Notes`
}; // IN TRANSACTIONS OF 10000 ROWS; Does not work in external transaction.  Semicolon Required if removing IN TRANSACTIONS.
//
// OPERATION:MIX:MAKESAMPLE OPERATION
// --------------
LOAD CSV WITH HEADERS FROM ($mix_makesamp_link) AS row
WITH row
WHERE NOT row.`Mix Operation ID` IN $idsToSkip AND NOT row.`Mix Operation ID` IS NULL
CALL {
  WITH row
  MERGE (n: Operation:Mix:MakeSample { `Mix Operation ID`: row.`Mix Operation ID` })
  SET n.`Mix Operation ID` = row.`Mix Operation ID`
  // Your script contains the datetime datatype. Our app attempts to convert dates to ISO 8601 date format before passing them to the Cypher function.
  // This conversion cannot be done in a Cypher script load. Please ensure that your CSV file columns are in ISO 8601 date format to ensure equivalent loads.
  SET n.`Timestamp` = datetime(row.`Mix Timestamp`)
  SET n.`New Sample ID` = row.`New Object ID`
  SET n.`Precipitated` = row.`Precipitated`
  SET n.`Ing 1 Description` = row.`Ing 1 Description`
  SET n.`Ing 1 ID` = row.`Ing 1 ID`
  SET n.`Ing 1 Actual Amt` = toFloat(trim(row.`Ing 1 Actual Amt`))
  SET n.`Ing 1 Amt Unit` = row.`Ing 1 Amt Unit`
  SET n.`Ing 2 Description` = row.`Ing 2 Description`
  SET n.`Ing 2 ID` = row.`Ing 2 ID`
  SET n.`Ing 2 Actual Amt` = toInteger(trim(row.`Ing 2 Actual Amt`))
  SET n.`Ing 2 Amt Unit` = row.`Ing 2 Amt Unit`
  SET n.`Executor` = row.`Executor`
  SET n.`Notes` = row.`Notes`
}; // IN TRANSACTIONS OF 10000 ROWS; Does not work in external transaction.  Semicolon Required if removing IN TRANSACTIONS.
//
// SAMPLES
// --------
LOAD CSV WITH HEADERS FROM ($mix_makesamp_link) AS row
WITH row
WHERE NOT row.`New Object ID` IN $idsToSkip AND NOT row.`New Object ID` IS NULL
CALL {
  WITH row
  MERGE (n: `Sample` { `Sample ID`: row.`New Object ID` })
  SET n.`Sample ID` = row.`New Object ID`
  // Your script contains the datetime datatype. Our app attempts to convert dates to ISO 8601 date format before passing them to the Cypher function.
  // This conversion cannot be done in a Cypher script load. Please ensure that your CSV file columns are in ISO 8601 date format to ensure equivalent loads.
  SET n.`Timestamp` = datetime(row.`Mix Timestamp`)
  SET n.`Target Material` = row.`New Object Description`
  // MATCH (p) WHERE p.`Precursor ID` = row.`Ing 1 ID`
  // SET n.`Ing 1 Description` = p.`Description`
  SET n.`Ing 1 Description` = row.`Ing 1 Description`
  SET n.`Ing 1 ID` = row.`Ing 1 ID`
  SET n.`Ing 2 Description` = row.`Ing 2 Description`
  SET n.`Ing 2 ID` = row.`Ing 2 ID`
}; // IN TRANSACTIONS OF 10000 ROWS; Does not work in external transaction.  Semicolon Required if removing IN TRANSACTIONS.


// RELATIONSHIP load 
// -----------------
//
// Load relationships in batches, one relationship type at a time. Relationships are created using a MERGE statement, meaning only one relationship of a given type will ever be created between a pair of nodes.
//
// ------------------------------------------------------------------------------------
// (OTC Ingredient) -[WENT_TO]-> (Mix)  //  Consider merging WENT_TO with WENT_TO
// (Ing 1)
LOAD CSV WITH HEADERS FROM ($mix_makepre_link) AS row
WITH row
CALL {
  WITH row
  MATCH (source: `OTC Ingredient` { `OTC Ingredient ID`: row.`Ing 1 ID` })
  MATCH (target: Operation:Mix:MakePrecursor { `Mix Operation ID`: row.`Mix Operation ID` })
  MERGE (source)-[r: `WENT_TO`]->(target)
}; //IN TRANSACTIONS OF 10000 ROWS;  Does not work in external transaction.  Semicolon Required if removing IN TRANSACTIONS.
// (Ing 2)
LOAD CSV WITH HEADERS FROM ($mix_makepre_link) AS row
WITH row
CALL {
  WITH row
  MATCH (source: `OTC Ingredient` { `OTC Ingredient ID`: row.`Ing 2 ID` })
  MATCH (target: Operation:Mix:MakePrecursor { `Mix Operation ID`: row.`Mix Operation ID` })
  MERGE (source)-[r: `WENT_TO`]->(target)
}; //IN TRANSACTIONS OF 10000 ROWS;  Does not work in external transaction.  Semicolon Required if removing IN TRANSACTIONS.
//
// (Precursor) -[WENT_TO]-> (Operation:Mix:MakeSample)
// (Ing 1)
LOAD CSV WITH HEADERS FROM ($mix_makesamp_link) AS row
WITH row
CALL {
  WITH row
  MATCH (source: `Precursor` { `Precursor ID`: row.`Ing 1 ID` })
  MATCH (target: Operation:Mix:MakeSample { `Mix Operation ID`: row.`Mix Operation ID` })
  MERGE (source)-[r: `WENT_TO`]->(target)
}; //IN TRANSACTIONS OF 10000 ROWS;  Does not work in external transaction.  Semicolon Required if removing IN TRANSACTIONS.
//
// (Ing 2)
LOAD CSV WITH HEADERS FROM ($mix_makesamp_link) AS row
WITH row
CALL {
  WITH row
  MATCH (source: `Precursor` { `Precursor ID`: row.`Ing 2 ID` })
  MATCH (target: Operation:Mix:MakeSample { `Mix Operation ID`: row.`Mix Operation ID` })
  MERGE (source)-[r: `WENT_TO`]->(target)
}; //IN TRANSACTIONS OF 10000 ROWS;  Does not work in external transaction.  Semicolon Required if removing IN TRANSACTIONS.
// ----------------------------------------------------------------------------------------------
// (Operation:Mix:MakePrecursor) -[CREATED]-> (Precursor)
LOAD CSV WITH HEADERS FROM ($mix_makepre_link) AS row
WITH row
CALL {
  WITH row
  MATCH (source: Operation:Mix:MakePrecursor { `Mix Operation ID`: row.`Mix Operation ID` })
  MATCH (target: `Precursor` { `Precursor ID`: row.`New Object ID` })
  MERGE (source)-[r: `CREATED`]->(target)
}; //IN TRANSACTIONS OF 10000 ROWS;   Does not work in external transaction.  Semicolon Required if removing IN TRANSACTIONS.
//
// (Operation:Mix:MakeSample) -[CREATED]-> (Sample)
LOAD CSV WITH HEADERS FROM ($mix_makesamp_link) AS row
WITH row
CALL {
  WITH row
  MATCH (source: Operation:Mix:MakeSample { `Mix Operation ID`: row.`Mix Operation ID` })
  MATCH (target: `Sample` { `Sample ID`: row.`New Object ID` })
  MERGE (source)-[r: `CREATED`]->(target)
}; //IN TRANSACTIONS OF 10000 ROWS;   Does not work in external transaction.  Semicolon Required if removing IN TRANSACTIONS.
//
// ----------------------------------------------------------------------------
// (Group Member) -[EXECUTED]-> (Operation:Mix:MakePrecursor)
LOAD CSV WITH HEADERS FROM ($mix_makepre_link) AS row
WITH row
CALL {
  WITH row
  MATCH (source: `Group Member` { `kerberos`: row.`Executor` })
  MATCH (target: Operation:Mix:MakePrecursor { `Mix Operation ID`: row.`Mix Operation ID` })
  MERGE (source)-[r: `EXECUTED`]->(target)
}; //IN TRANSACTIONS OF 10000 ROWS;   Does not work in external transaction.  Semicolon Required if removing IN TRANSACTIONS.
//
// (Group Member) -[EXECUTED]-> (Operation:Mix:MakeSample)
LOAD CSV WITH HEADERS FROM ($mix_makesamp_link) AS row
WITH row
CALL {
  WITH row
  MATCH (source: `Group Member` { `kerberos`: row.`Executor` })
  MATCH (target: Operation:Mix:MakeSample { `Mix Operation ID`: row.`Mix Operation ID` })
  MERGE (source)-[r: `EXECUTED`]->(target)
}; //IN TRANSACTIONS OF 10000 ROWS;   Does not work in external transaction.  Semicolon Required if removing IN TRANSACTIONS.
// ------------------------------------------------------------------------------
// (Precursor) -[WENT_TO]-> (Operation:Heat)
LOAD CSV WITH HEADERS FROM ($heat_link) AS row
WITH row
CALL {
  WITH row
  MATCH (source: `Precursor` { `Precursor ID`: row.`Heat Object ID` })
  MATCH (target: Operation:Heat { `Heat Operation ID`: row.`Heat Operation ID` })
  MERGE (source)-[r: `WENT_TO`]->(target)
  }; //IN TRANSACTIONS OF 10000 ROWS;   Does not work in external transaction.  Semicolon Required if removing IN TRANSACTIONS.
//
// (Precursor) -[WENT_TO]-> (Operation:Rest)
LOAD CSV WITH HEADERS FROM ($rest_link) AS row
WITH row
CALL {
  WITH row
  MATCH (source: `Precursor` { `Precursor ID`: row.`Rest Object ID` })
  MATCH (target: Operation:Rest { `Rest Operation ID`: row.`Rest Operation ID` })
  MERGE (source)-[r: `WENT_TO`]->(target)
  }; //IN TRANSACTIONS OF 10000 ROWS;   Does not work in external transaction.  Semicolon Required if removing IN TRANSACTIONS.
